#include "ResourceManager.h"

#include <map>

#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

#include "TerrainSystem.h"
#include "StaticMeshSystem.h"

namespace ResourceManager
{
	u64 DefaultTextureHash;

	static const char TexturesPath[] = ".\\Resources\\Textures";

	static std::map<u64, Render::RenderTexture> Textures;
	static std::map<std::string, VkDescriptorSet> EngineMaterials;

	static void LoadTextures(const char* Directory);

	void Init()
	{
		std::hash<std::string> Hasher;
		DefaultTextureHash = Hasher("Default");

		s32 Width;
		s32 Height;
		s32 Channels;

		stbi_uc* Data[1];

		Data[0] = stbi_load_from_memory(DefaultTextureData, DefaultTextureDataCount,
			&Width, &Height, &Channels, STBI_rgb_alpha);

		Render::TextureArrayInfo Info;
		Info.Width = Width;
		Info.Height = Height;
		Info.Format = STBI_rgb_alpha;
		Info.LayersCount = 1;
		Info.Data = Data;
		Info.ViewType = VK_IMAGE_VIEW_TYPE_2D;
		Info.Flags = 0;

		Textures[DefaultTextureHash] = Render::CreateTexture(&Info);

		LoadTextures(TexturesPath);
	}

	void DeInit()
	{
		for (auto& Texture : Textures)
		{
			Render::DestroyTexture(&Texture.second);
		}
	}

	Render::RenderTexture LoadTexture(const std::string& Id, const std::vector<std::string>& PathNames,
		VkImageViewType Type, VkImageCreateFlags Flags)
	{
		assert(PathNames.size() > 0);
		std::vector<stbi_uc*> ImageData(PathNames.size());

		int Width = 0;
		int Height = 0;
		int Channels = 0;

		for (u32 i = 0; i < PathNames.size(); ++i)
		{
			ImageData[i] = stbi_load((PathNames[i]).c_str(), &Width, &Height, &Channels, STBI_rgb_alpha);

			if (ImageData[i] == nullptr)
			{
				assert(false);
			}
		}

		Render::TextureArrayInfo Info;
		Info.Width = Width;
		Info.Height = Height;
		Info.Format = STBI_rgb_alpha;
		Info.LayersCount = PathNames.size();
		Info.Data = ImageData.data();
		Info.ViewType = Type;
		Info.Flags = Flags;

		Render::RenderTexture Texture = Render::CreateTexture(&Info);

		for (u32 i = 0; i < PathNames.size(); ++i)
		{
			stbi_image_free(ImageData[i]);
		};

		std::hash<std::string> Hasher;
		Textures[Hasher(Id)] = Texture;
		return Texture;
	}

	Render::RenderTexture EmptyTexture(const std::string& Id, u32 Width, u32 Height, u32 Layers,
		VkImageViewType Type, VkImageCreateFlags Flags)
	{
		Render::TextureArrayInfo Info;
		Info.Width = Width;
		Info.Height = Height;
		Info.Format = STBI_rgb_alpha;
		Info.LayersCount = Layers;
		Info.ViewType = Type;
		Info.Flags = Flags;

		Render::RenderTexture Texture = Render::CreateEmptyTexture(&Info);

		std::hash<std::string> Hasher;
		Textures[Hasher(Id)] = Texture;
		return Texture;
	}

	void LoadToTexture(Render::RenderTexture* Texture, const std::vector<std::string>& PathNames)
	{
		assert(PathNames.size() > 0);
		std::vector<stbi_uc*> ImageData(PathNames.size());

		int Width = 0;
		int Height = 0;
		int Channels = 0;

		for (u32 i = 0; i < PathNames.size(); ++i)
		{
			ImageData[i] = stbi_load((TexturesPath + PathNames[i]).c_str(), &Width, &Height, &Channels, STBI_rgb_alpha);

			if (ImageData[i] == nullptr)
			{
				assert(false);
			}
		}

		Render::TextureArrayInfo Info;
		Info.Width = Width;
		Info.Height = Height;
		Info.Format = STBI_rgb_alpha;
		Info.LayersCount = PathNames.size();
		Info.Data = ImageData.data();

		Render::UpdateTexture(Texture, &Info);

		for (u32 i = 0; i < PathNames.size(); ++i)
		{
			stbi_image_free(ImageData[i]);
		};
	}

	VkDescriptorSet FindMaterial(const std::string& Id)
	{
		auto it = EngineMaterials.find(Id);
		if (it != EngineMaterials.end())
		{
			return it->second;
		}

		return nullptr;
	}

	Render::RenderTexture* FindTexture(const std::string& Id)
	{
		std::hash<std::string> Hasher;
		return FindTexture(Hasher(Id));
	}

	Render::RenderTexture* FindTexture(u64 Hash)
	{
		auto it = Textures.find(Hash);
		if (it != Textures.end())
		{
			return &it->second;
		}

		return &Textures.find(DefaultTextureHash)->second;
	}

	void CreateSkyBoxTerrainTexture(const std::string& Id, VkImageView DefuseImage, VkDescriptorSet* SetToAttach)
	{
		TerrainSystem::TestAttachSkyNoxTerrainTexture(DefuseImage, SetToAttach);
		EngineMaterials[Id] = *SetToAttach;
	}

	void LoadTextures(const char* Directory)
	{
		WIN32_FIND_DATAA FindFileData;
		HANDLE hFind;

		char SearchPath[MAX_PATH];
		snprintf(SearchPath, sizeof(SearchPath), "%s\\*", Directory);

		hFind = FindFirstFileA(SearchPath, &FindFileData);
		if (hFind == INVALID_HANDLE_VALUE)
		{
			assert(false);
			return;
		}

		do
		{
			const char* FileName = FindFileData.cFileName;

			if (strcmp(FileName, ".") == 0 || strcmp(FileName, "..") == 0)
			{
				continue;
			}

			char FullPath[MAX_PATH];
			snprintf(FullPath, sizeof(FullPath), "%s\\%s", Directory, FileName);

			if (FindFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
			{
				LoadTextures(FullPath);
			}
			else
			{
				LoadTexture(FileName, { FullPath }, VK_IMAGE_VIEW_TYPE_2D);
			}
		}
		while (FindNextFileA(hFind, &FindFileData));

		FindClose(hFind);
	}

	const u8 DefaultTextureData[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00,
		0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x03, 0x00,
		0x00, 0x00, 0x21, 0x1C, 0x40, 0xF5, 0x00, 0x00, 0x00, 0x09, 0x50, 0x4C, 0x54, 0x45, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xA8, 0xBF, 0xC5, 0x0A, 0x00, 0x00, 0x01, 0x57, 0x49,
		0x44, 0x41, 0x54, 0x78, 0x9C, 0xED, 0xD4, 0x41, 0x6E, 0x83, 0x30, 0x10, 0x40, 0xD1, 0x6C, 0x7A,
		0xAF, 0x5E, 0xC2, 0x2C, 0x7C, 0x04, 0xDF, 0xC7, 0x5D, 0x64, 0xEF, 0x85, 0x7D, 0xCA, 0xCE, 0x8C,
		0x8D, 0xA1, 0x2A, 0xA9, 0xE3, 0x44, 0x0D, 0x55, 0xF5, 0xBF, 0x14, 0x40, 0x02, 0x1E, 0xD8, 0x01,
		0x2E, 0x17, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x9A, 0xED, 0xCD, 0xCD,
		0xF4, 0x0E, 0x00, 0xF0, 0x7F, 0x01, 0x5F, 0x2C, 0xE7, 0xF4, 0xE7, 0xDC, 0x52, 0xB2, 0xFC, 0xA4,
		0xE4, 0x5C, 0xDB, 0x95, 0x75, 0x5B, 0xF7, 0xC4, 0x29, 0x40, 0x0E, 0x5F, 0x81, 0x90, 0x75, 0x8F,
		0x2F, 0x73, 0x77, 0x20, 0xEB, 0x15, 0xF0, 0x15, 0xC8, 0x43, 0x20, 0xDA, 0x75, 0x56, 0xA0, 0x6C,
		0x80, 0xD1, 0xE1, 0x16, 0x90, 0xDB, 0x04, 0xED, 0x01, 0x3D, 0xBE, 0xAC, 0x97, 0xB5, 0xD1, 0xCB,
		0xFE, 0x34, 0x07, 0xD4, 0xB3, 0xEA, 0xDE, 0x0A, 0xC4, 0x21, 0x90, 0xEC, 0xC2, 0x0D, 0x70, 0x7B,
		0x20, 0x35, 0xF0, 0x67, 0xE0, 0x6A, 0xC0, 0xB5, 0x03, 0xA9, 0x03, 0x3A, 0x7C, 0x9B, 0x88, 0x29,
		0x20, 0x6C, 0x80, 0x2E, 0x6D, 0x6B, 0x00, 0xE4, 0xB6, 0xFC, 0x0E, 0x94, 0x7A, 0x17, 0x03, 0xE0,
		0xC3, 0x00, 0x7F, 0x00, 0xE8, 0xF8, 0x6D, 0x44, 0x8F, 0x02, 0x3A, 0xA1, 0x36, 0xA7, 0x03, 0xA0,
		0xE8, 0xB5, 0x8E, 0x81, 0xB4, 0xDC, 0x01, 0x44, 0x05, 0xF2, 0x21, 0x10, 0xDA, 0xD3, 0x38, 0x05,
		0xEC, 0x9E, 0x03, 0x59, 0xD5, 0x8D, 0x11, 0x10, 0xEB, 0x91, 0x07, 0x40, 0x09, 0xB7, 0x81, 0xF6,
		0xEA, 0xC9, 0x09, 0x41, 0x80, 0xE4, 0x0F, 0x1E, 0x65, 0x7D, 0xBD, 0xD2, 0x2C, 0xB0, 0x7B, 0x99,
		0xEE, 0x07, 0x92, 0xCC, 0x9C, 0xDF, 0xBE, 0x07, 0x1B, 0xD0, 0xDE, 0xB4, 0x11, 0xE0, 0x05, 0x88,
		0x1D, 0x48, 0x7B, 0xA0, 0xDE, 0xCF, 0x68, 0x12, 0xBF, 0x02, 0xF1, 0x01, 0x20, 0xD7, 0xC5, 0xD2,
		0x6F, 0xA0, 0x03, 0x6D, 0x3D, 0x00, 0x16, 0x01, 0x5C, 0xFF, 0x1B, 0x4F, 0x01, 0xCA, 0x72, 0x32,
		0xE0, 0x8A, 0x0C, 0xE2, 0x64, 0xE0, 0xFA, 0x24, 0x10, 0xE4, 0xBB, 0x7A, 0x32, 0x50, 0x9E, 0x04,
		0xBC, 0x7D, 0x52, 0x66, 0x81, 0xD2, 0x5E, 0x9D, 0x3F, 0x01, 0xE8, 0x99, 0xAF, 0x07, 0xDC, 0x4C,
		0x00, 0x00, 0x00, 0xBF, 0x07, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
		0x11, 0x11, 0xD1, 0x8B, 0xFB, 0x04, 0xBF, 0xC7, 0x67, 0xE1, 0x9D, 0xA3, 0x64, 0xDD, 0x00, 0x00,
		0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
	};

	u64 DefaultTextureDataCount = sizeof(DefaultTextureData) / sizeof(DefaultTextureData[0]);
}